name: Update aqua-checksums.json
description: Update aqua-checksums.json
inputs:
  working_directory:
    required: false
  prune:
    required: false
    default: false
  skip_push:
    required: false
    default: false
  read_checksum_token:
    required: false
    default: ''  # When this input is an empty string, it doesn't override `AQUA_GITHUB_TOKEN`.
    description: |
      This token overrides `AQUA_GITHUB_TOKEN` to executes `aqua update-checksum`. It must have `contents:read` permission about all repositories
      in tools managed by `aqua`. This input is useful to fetch checksum from private repositories.
runs:
  using: composite
  steps:
    - shell: bash
      working-directory: ${{inputs.working_directory}}
      run: aqua update-checksum -deep
      if: inputs.prune != 'true'
      env:
        AQUA_GITHUB_TOKEN: ${{ (inputs.read_checksum_token != '') &&  inputs.read_checksum_token || env.AQUA_GITHUB_TOKEN }}
    - shell: bash
      working-directory: ${{inputs.working_directory}}
      run: aqua update-checksum -deep -prune
      if: inputs.prune == 'true'
      env:
        AQUA_GITHUB_TOKEN: ${{ (inputs.read_checksum_token != '') &&  inputs.read_checksum_token || env.AQUA_GITHUB_TOKEN }}

    - shell: bash
      id: find
      working-directory: ${{inputs.working_directory}}
      run: |
        set -eu
        for p in aqua-checksums.json .aqua-checksums.json aqua/aqua-checksums.json aqua/.aqua-checksums.json .aqua/aqua-checksums.json .aqua/.aqua-checksums.json; do
          if [ -f "$p" ]; then
            echo "checksum_file=$p" >> $GITHUB_OUTPUT
            exit 0
          fi
        done
        echo "::error ::aqua checksum json file isn't found"
        exit 1
    - shell: bash
      working-directory: ${{inputs.working_directory}}
      run: git add ${{steps.find.outputs.checksum_file}}

    - shell: bash
      if: inputs.skip_push == 'true'
      run: |
        set -eu
        if [ -n "$WORKING_DIR" ]; then
          CHECKSUM_FILE="$WORKING_DIR/$CHECKSUM_FILE"
        fi
        if ! git diff --cached --exit-code "${CHECKSUM_FILE}"; then
          echo "::error file=${CHECKSUM_FILE}::${CHECKSUM_FILE} isn't latest."
          exit 1
        fi
      env:
        CHECKSUM_FILE: ${{steps.find.outputs.checksum_file}}
        WORKING_DIR: ${{inputs.working_directory}}

    - shell: bash
      if: inputs.skip_push != 'true'
      run: |
        set -eu
        if [ -n "$WORKING_DIR" ]; then
          CHECKSUM_FILE="$WORKING_DIR/$CHECKSUM_FILE"
        fi
        if git diff --cached --exit-code "${CHECKSUM_FILE}"; then
          exit 0
        fi
        echo "::error file=${CHECKSUM_FILE}::${CHECKSUM_FILE} isn't latest. A commit is pushed automatically to update ${CHECKSUM_FILE}."

        if ! ghcp -v; then
          echo "::error ::int128/ghcp isn't installed. To push a commit, ghcp is required."
          exit 1
        fi

        # https://github.com/int128/ghcp
        branch=${GITHUB_HEAD_REF:-}
        if [ -z "$branch" ]; then
          branch=$GITHUB_REF_NAME
        fi
        ghcp commit -r "$GITHUB_REPOSITORY" -b "$branch" \
          -m "chore(aqua): update $CHECKSUM_FILE" \
          "$CHECKSUM_FILE"
        exit 1
      env:
        CHECKSUM_FILE: ${{steps.find.outputs.checksum_file}}
        WORKING_DIR: ${{inputs.working_directory}}
